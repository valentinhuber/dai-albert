Terminals unused in grammar

   TRUE
   FALSE
   FLOAT
   BOOL
   STRING
   '>'
   '<'
   NE
   EQ
   LE
   GE
   UMINUS


Grammar

    0 $accept: function $end

    1 function: MAIN scope

    2 scope: '{' stmts '}'

    3 stmts: /* empty */
    4      | stmts stmt

    5 stmt: ';'
    6     | declaration ';'
    7     | PRINT expr ';'
    8     | WHILE '(' expr ')' stmt
    9     | IF '(' expr ')' stmt
   10     | IF '(' expr ')' stmt ELSE stmt
   11     | scope

   12 @1: /* empty */

   13 declaration: INT @1 expr ';'

   14 expr: INTEGER
   15     | VARIABLE
   16     | expr '+' expr
   17     | expr '-' expr
   18     | expr '*' expr
   19     | expr '/' expr


Terminals, with rules where they appear

$end (0) 0
'(' (40) 8 9 10
')' (41) 8 9 10
'*' (42) 18
'+' (43) 16
'-' (45) 17
'/' (47) 19
';' (59) 5 6 7 13
'<' (60)
'>' (62)
'{' (123) 2
'}' (125) 2
error (256)
MAIN (258) 1
INTEGER (259) 14
VARIABLE (260) 15
WHILE (261) 8
IF (262) 9 10
PRINT (263) 7
TRUE (264)
FALSE (265)
IFX (266)
ELSE (267) 10
INT (268) 13
FLOAT (269)
BOOL (270)
STRING (271)
NE (272)
EQ (273)
LE (274)
GE (275)
UMINUS (276)


Nonterminals, with rules where they appear

$accept (33)
    on left: 0
function (34)
    on left: 1, on right: 0
scope (35)
    on left: 2, on right: 1 11
stmts (36)
    on left: 3 4, on right: 2 4
stmt (37)
    on left: 5 6 7 8 9 10 11, on right: 4 8 9 10
declaration (38)
    on left: 13, on right: 6
@1 (39)
    on left: 12, on right: 13
expr (40)
    on left: 14 15 16 17 18 19, on right: 7 8 9 10 13 16 17 18 19


State 0

    0 $accept: . function $end

    MAIN  shift, and go to state 1

    function  go to state 2


State 1

    1 function: MAIN . scope

    '{'  shift, and go to state 3

    scope  go to state 4


State 2

    0 $accept: function . $end

    $end  shift, and go to state 5


State 3

    2 scope: '{' . stmts '}'

    $default  reduce using rule 3 (stmts)

    stmts  go to state 6


State 4

    1 function: MAIN scope .

    $default  reduce using rule 1 (function)


State 5

    0 $accept: function $end .

    $default  accept


State 6

    2 scope: '{' stmts . '}'
    4 stmts: stmts . stmt

    WHILE  shift, and go to state 7
    IF     shift, and go to state 8
    PRINT  shift, and go to state 9
    INT    shift, and go to state 10
    '{'    shift, and go to state 3
    '}'    shift, and go to state 11
    ';'    shift, and go to state 12

    scope        go to state 13
    stmt         go to state 14
    declaration  go to state 15


State 7

    8 stmt: WHILE . '(' expr ')' stmt

    '('  shift, and go to state 16


State 8

    9 stmt: IF . '(' expr ')' stmt
   10     | IF . '(' expr ')' stmt ELSE stmt

    '('  shift, and go to state 17


State 9

    7 stmt: PRINT . expr ';'

    INTEGER   shift, and go to state 18
    VARIABLE  shift, and go to state 19

    expr  go to state 20


State 10

   13 declaration: INT . @1 expr ';'

    $default  reduce using rule 12 (@1)

    @1  go to state 21


State 11

    2 scope: '{' stmts '}' .

    $default  reduce using rule 2 (scope)


State 12

    5 stmt: ';' .

    $default  reduce using rule 5 (stmt)


State 13

   11 stmt: scope .

    $default  reduce using rule 11 (stmt)


State 14

    4 stmts: stmts stmt .

    $default  reduce using rule 4 (stmts)


State 15

    6 stmt: declaration . ';'

    ';'  shift, and go to state 22


State 16

    8 stmt: WHILE '(' . expr ')' stmt

    INTEGER   shift, and go to state 18
    VARIABLE  shift, and go to state 19

    expr  go to state 23


State 17

    9 stmt: IF '(' . expr ')' stmt
   10     | IF '(' . expr ')' stmt ELSE stmt

    INTEGER   shift, and go to state 18
    VARIABLE  shift, and go to state 19

    expr  go to state 24


State 18

   14 expr: INTEGER .

    $default  reduce using rule 14 (expr)


State 19

   15 expr: VARIABLE .

    $default  reduce using rule 15 (expr)


State 20

    7 stmt: PRINT expr . ';'
   16 expr: expr . '+' expr
   17     | expr . '-' expr
   18     | expr . '*' expr
   19     | expr . '/' expr

    '+'  shift, and go to state 25
    '-'  shift, and go to state 26
    '*'  shift, and go to state 27
    '/'  shift, and go to state 28
    ';'  shift, and go to state 29


State 21

   13 declaration: INT @1 . expr ';'

    INTEGER   shift, and go to state 18
    VARIABLE  shift, and go to state 19

    expr  go to state 30


State 22

    6 stmt: declaration ';' .

    $default  reduce using rule 6 (stmt)


State 23

    8 stmt: WHILE '(' expr . ')' stmt
   16 expr: expr . '+' expr
   17     | expr . '-' expr
   18     | expr . '*' expr
   19     | expr . '/' expr

    '+'  shift, and go to state 25
    '-'  shift, and go to state 26
    '*'  shift, and go to state 27
    '/'  shift, and go to state 28
    ')'  shift, and go to state 31


State 24

    9 stmt: IF '(' expr . ')' stmt
   10     | IF '(' expr . ')' stmt ELSE stmt
   16 expr: expr . '+' expr
   17     | expr . '-' expr
   18     | expr . '*' expr
   19     | expr . '/' expr

    '+'  shift, and go to state 25
    '-'  shift, and go to state 26
    '*'  shift, and go to state 27
    '/'  shift, and go to state 28
    ')'  shift, and go to state 32


State 25

   16 expr: expr '+' . expr

    INTEGER   shift, and go to state 18
    VARIABLE  shift, and go to state 19

    expr  go to state 33


State 26

   17 expr: expr '-' . expr

    INTEGER   shift, and go to state 18
    VARIABLE  shift, and go to state 19

    expr  go to state 34


State 27

   18 expr: expr '*' . expr

    INTEGER   shift, and go to state 18
    VARIABLE  shift, and go to state 19

    expr  go to state 35


State 28

   19 expr: expr '/' . expr

    INTEGER   shift, and go to state 18
    VARIABLE  shift, and go to state 19

    expr  go to state 36


State 29

    7 stmt: PRINT expr ';' .

    $default  reduce using rule 7 (stmt)


State 30

   13 declaration: INT @1 expr . ';'
   16 expr: expr . '+' expr
   17     | expr . '-' expr
   18     | expr . '*' expr
   19     | expr . '/' expr

    '+'  shift, and go to state 25
    '-'  shift, and go to state 26
    '*'  shift, and go to state 27
    '/'  shift, and go to state 28
    ';'  shift, and go to state 37


State 31

    8 stmt: WHILE '(' expr ')' . stmt

    WHILE  shift, and go to state 7
    IF     shift, and go to state 8
    PRINT  shift, and go to state 9
    INT    shift, and go to state 10
    '{'    shift, and go to state 3
    ';'    shift, and go to state 12

    scope        go to state 13
    stmt         go to state 38
    declaration  go to state 15


State 32

    9 stmt: IF '(' expr ')' . stmt
   10     | IF '(' expr ')' . stmt ELSE stmt

    WHILE  shift, and go to state 7
    IF     shift, and go to state 8
    PRINT  shift, and go to state 9
    INT    shift, and go to state 10
    '{'    shift, and go to state 3
    ';'    shift, and go to state 12

    scope        go to state 13
    stmt         go to state 39
    declaration  go to state 15


State 33

   16 expr: expr . '+' expr
   16     | expr '+' expr .
   17     | expr . '-' expr
   18     | expr . '*' expr
   19     | expr . '/' expr

    '*'  shift, and go to state 27
    '/'  shift, and go to state 28

    $default  reduce using rule 16 (expr)


State 34

   16 expr: expr . '+' expr
   17     | expr . '-' expr
   17     | expr '-' expr .
   18     | expr . '*' expr
   19     | expr . '/' expr

    '*'  shift, and go to state 27
    '/'  shift, and go to state 28

    $default  reduce using rule 17 (expr)


State 35

   16 expr: expr . '+' expr
   17     | expr . '-' expr
   18     | expr . '*' expr
   18     | expr '*' expr .
   19     | expr . '/' expr

    $default  reduce using rule 18 (expr)


State 36

   16 expr: expr . '+' expr
   17     | expr . '-' expr
   18     | expr . '*' expr
   19     | expr . '/' expr
   19     | expr '/' expr .

    $default  reduce using rule 19 (expr)


State 37

   13 declaration: INT @1 expr ';' .

    $default  reduce using rule 13 (declaration)


State 38

    8 stmt: WHILE '(' expr ')' stmt .

    $default  reduce using rule 8 (stmt)


State 39

    9 stmt: IF '(' expr ')' stmt .
   10     | IF '(' expr ')' stmt . ELSE stmt

    ELSE  shift, and go to state 40

    $default  reduce using rule 9 (stmt)


State 40

   10 stmt: IF '(' expr ')' stmt ELSE . stmt

    WHILE  shift, and go to state 7
    IF     shift, and go to state 8
    PRINT  shift, and go to state 9
    INT    shift, and go to state 10
    '{'    shift, and go to state 3
    ';'    shift, and go to state 12

    scope        go to state 13
    stmt         go to state 41
    declaration  go to state 15


State 41

   10 stmt: IF '(' expr ')' stmt ELSE stmt .

    $default  reduce using rule 10 (stmt)
