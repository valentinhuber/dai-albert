Terminals unused in grammar

   WHILE
   IF
   IFX
   ELSE
   '>'
   '<'
   NE
   EQ
   LE
   GE
   UMINUS


Grammar

    0 $accept: program $end

    1 program: function

    2 function: MAIN scope

    3 scope: '{' stmts '}'

    4 stmts: /* empty */
    5      | stmts stmt
    6      | stmts scope

    7 stmt: ';'
    8     | expr ';'
    9     | PRINT expr ';'
   10     | VARIABLE '=' expr ';'

   11 expr: INTEGER
   12     | VARIABLE
   13     | expr '+' expr
   14     | expr '-' expr
   15     | expr '*' expr
   16     | expr '/' expr


Terminals, with rules where they appear

$end (0) 0
'*' (42) 15
'+' (43) 13
'-' (45) 14
'/' (47) 16
';' (59) 7 8 9 10
'<' (60)
'=' (61) 10
'>' (62)
'{' (123) 3
'}' (125) 3
error (256)
MAIN (258) 2
INTEGER (259) 11
VARIABLE (260) 10 12
WHILE (261)
IF (262)
PRINT (263) 9
IFX (264)
ELSE (265)
NE (266)
EQ (267)
LE (268)
GE (269)
UMINUS (270)


Nonterminals, with rules where they appear

$accept (26)
    on left: 0
program (27)
    on left: 1, on right: 0
function (28)
    on left: 2, on right: 1
scope (29)
    on left: 3, on right: 2 6
stmts (30)
    on left: 4 5 6, on right: 3 5 6
stmt (31)
    on left: 7 8 9 10, on right: 5
expr (32)
    on left: 11 12 13 14 15 16, on right: 8 9 10 13 14 15 16


State 0

    0 $accept: . program $end

    MAIN  shift, and go to state 1

    program   go to state 2
    function  go to state 3


State 1

    2 function: MAIN . scope

    '{'  shift, and go to state 4

    scope  go to state 5


State 2

    0 $accept: program . $end

    $end  shift, and go to state 6


State 3

    1 program: function .

    $default  reduce using rule 1 (program)


State 4

    3 scope: '{' . stmts '}'

    $default  reduce using rule 4 (stmts)

    stmts  go to state 7


State 5

    2 function: MAIN scope .

    $default  reduce using rule 2 (function)


State 6

    0 $accept: program $end .

    $default  accept


State 7

    3 scope: '{' stmts . '}'
    5 stmts: stmts . stmt
    6      | stmts . scope

    INTEGER   shift, and go to state 8
    VARIABLE  shift, and go to state 9
    PRINT     shift, and go to state 10
    '{'       shift, and go to state 4
    '}'       shift, and go to state 11
    ';'       shift, and go to state 12

    scope  go to state 13
    stmt   go to state 14
    expr   go to state 15


State 8

   11 expr: INTEGER .

    $default  reduce using rule 11 (expr)


State 9

   10 stmt: VARIABLE . '=' expr ';'
   12 expr: VARIABLE .

    '='  shift, and go to state 16

    $default  reduce using rule 12 (expr)


State 10

    9 stmt: PRINT . expr ';'

    INTEGER   shift, and go to state 8
    VARIABLE  shift, and go to state 17

    expr  go to state 18


State 11

    3 scope: '{' stmts '}' .

    $default  reduce using rule 3 (scope)


State 12

    7 stmt: ';' .

    $default  reduce using rule 7 (stmt)


State 13

    6 stmts: stmts scope .

    $default  reduce using rule 6 (stmts)


State 14

    5 stmts: stmts stmt .

    $default  reduce using rule 5 (stmts)


State 15

    8 stmt: expr . ';'
   13 expr: expr . '+' expr
   14     | expr . '-' expr
   15     | expr . '*' expr
   16     | expr . '/' expr

    '+'  shift, and go to state 19
    '-'  shift, and go to state 20
    '*'  shift, and go to state 21
    '/'  shift, and go to state 22
    ';'  shift, and go to state 23


State 16

   10 stmt: VARIABLE '=' . expr ';'

    INTEGER   shift, and go to state 8
    VARIABLE  shift, and go to state 17

    expr  go to state 24


State 17

   12 expr: VARIABLE .

    $default  reduce using rule 12 (expr)


State 18

    9 stmt: PRINT expr . ';'
   13 expr: expr . '+' expr
   14     | expr . '-' expr
   15     | expr . '*' expr
   16     | expr . '/' expr

    '+'  shift, and go to state 19
    '-'  shift, and go to state 20
    '*'  shift, and go to state 21
    '/'  shift, and go to state 22
    ';'  shift, and go to state 25


State 19

   13 expr: expr '+' . expr

    INTEGER   shift, and go to state 8
    VARIABLE  shift, and go to state 17

    expr  go to state 26


State 20

   14 expr: expr '-' . expr

    INTEGER   shift, and go to state 8
    VARIABLE  shift, and go to state 17

    expr  go to state 27


State 21

   15 expr: expr '*' . expr

    INTEGER   shift, and go to state 8
    VARIABLE  shift, and go to state 17

    expr  go to state 28


State 22

   16 expr: expr '/' . expr

    INTEGER   shift, and go to state 8
    VARIABLE  shift, and go to state 17

    expr  go to state 29


State 23

    8 stmt: expr ';' .

    $default  reduce using rule 8 (stmt)


State 24

   10 stmt: VARIABLE '=' expr . ';'
   13 expr: expr . '+' expr
   14     | expr . '-' expr
   15     | expr . '*' expr
   16     | expr . '/' expr

    '+'  shift, and go to state 19
    '-'  shift, and go to state 20
    '*'  shift, and go to state 21
    '/'  shift, and go to state 22
    ';'  shift, and go to state 30


State 25

    9 stmt: PRINT expr ';' .

    $default  reduce using rule 9 (stmt)


State 26

   13 expr: expr . '+' expr
   13     | expr '+' expr .
   14     | expr . '-' expr
   15     | expr . '*' expr
   16     | expr . '/' expr

    '*'  shift, and go to state 21
    '/'  shift, and go to state 22

    $default  reduce using rule 13 (expr)


State 27

   13 expr: expr . '+' expr
   14     | expr . '-' expr
   14     | expr '-' expr .
   15     | expr . '*' expr
   16     | expr . '/' expr

    '*'  shift, and go to state 21
    '/'  shift, and go to state 22

    $default  reduce using rule 14 (expr)


State 28

   13 expr: expr . '+' expr
   14     | expr . '-' expr
   15     | expr . '*' expr
   15     | expr '*' expr .
   16     | expr . '/' expr

    $default  reduce using rule 15 (expr)


State 29

   13 expr: expr . '+' expr
   14     | expr . '-' expr
   15     | expr . '*' expr
   16     | expr . '/' expr
   16     | expr '/' expr .

    $default  reduce using rule 16 (expr)


State 30

   10 stmt: VARIABLE '=' expr ';' .

    $default  reduce using rule 10 (stmt)
